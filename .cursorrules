# Cursor AI Assistant - 全社展開用clasp環境運用ルール

## 対象ユーザー・開発環境
- **日本語話者**のプログラミング初心者〜中級者
- **Python・Google Apps Script**での作業効率化
- **clasp環境による一時的な開発・テスト環境**
- **UV + pyproject.toml**によるモダン開発環境

## 基本動作ルール

### 言語使用
- **回答言語**: 日本語
- **コード**: 英語
- **コメント**: 日本語

### 新運用方針（重要）
- **clasp環境は一時的な作業場**: 開発・動作確認のみ
- **本番は個人プロジェクト**: 動作確認後に個人GASプロジェクトに移行
- **コードは残さない**: 作業完了後は必ずクリーンアップ
- **命名規則不要**: 一時的な使用のため特別な命名規則なし

### Cursor向け開発指示
- **ファイル作成**: gas/Code.js のみを編集（新規ファイル作成禁止）
- **テスト実行**: 必ず `clasp push` → `clasp run 関数名` で動作確認
- **完成判定**: 個人プロジェクトでの動作確認完了をもって作業完了とする

## プロジェクト構成

### 標準フォルダ構成
```
Cursor/
├── appsscript.json       # GAS設定ファイル（プロジェクトルート）
├── gas/                  # GAS開発用作業フォルダ（clasp管理対象）
│   ├── Code.js          # 一時的な開発ファイル
│   └── archive/         # 参考用コード保存（clasp管理対象外）
├── python/               # Python開発用（clasp管理対象外）
├── .clasp.json           # claspプロジェクト設定（rootDir: "./"）
├── .claspignore          # clasp除外設定
└── client_secret_gas_common.json  # 共通OAuth認証
```

### フォルダ・ファイル利用ルール
- **gas/Code.js**: 一時的なGAS開発ファイル（clasp管理対象）
- **gas/archive/**: 参考用コード保存（clasp管理対象外）
- **python/**: Python開発用フォルダ（clasp管理対象外）
- **appsscript.json**: GAS権限・設定ファイル（clasp管理対象）

### 管理対象・対象外
- **clasp管理対象**: `gas/Code.js`、`appsscript.json` のみ
- **clasp管理対象外**: `gas/archive/`、`python/`、`.venv/`、ドキュメントファイル

## 開発フロールール

### GAS開発フロー
1. **gas/Code.js で開発**: 一時的な開発・テスト
2. **clasp push**: gas/Code.js と appsscript.json をGASプロジェクトにアップロード
3. **clasp run**: 関数実行テスト
4. **個人プロジェクトに移行**: GAS Web Editorで新規プロジェクト作成してコードをコピー&ペースト
5. **アーカイブ保存**: 必要に応じて gas/archive/ に参考用コードを保存
6. **必須クリーンアップ**: gas/Code.js を初期状態に戻す

### Python開発フロー
1. **python/フォルダで開発**: 通常のPython開発
2. **uv run python script.py**: 実行・テスト
3. **プロジェクト管理**: 必要に応じてプロジェクトフォルダで整理

### 必須クリーンアップ
作業完了後は**必ず**以下を実行:
```javascript
// gas/Code.js を以下の内容に戻す
/**
 * vibe coding 用 clasp 作業環境
 */
function testFunction() {
  console.log('clasp環境の動作確認用関数です');
  return 'OK';
}
```

## Python環境 (UV) ルール

### 環境管理
- **UV環境の新規作成禁止** - 既存環境を使用
- **実行コマンド**: `uv run python script.py`
- **パッケージ管理**: `uv add package-name`

### 開発フロー指示
1. python/フォルダでコード作成
2. UV コマンドでの実行例を提供
3. pyproject.toml への依存関係説明

## Google Apps Script (GAS) ルール

### clasp環境の位置づけ
- **一時的な開発環境**: ステージング環境として使用
- **動作確認専用**: 本格的な開発は個人プロジェクトで
- **共有環境**: チーム利用のため占有時間を最小限に

### 関数・変数命名
- **特別な命名規則不要**: 一時的な使用のため
- **わかりやすい名前**: 短期間でも理解しやすい命名
- **競合回避不要**: 個人プロジェクト移行前提のため

### 移行手順
1. clasp環境で開発・テスト
2. 動作確認完了
3. GAS Web Editor で新規プロジェクト作成
4. コードをコピー&ペースト
5. clasp環境をクリーンアップ

### 禁止事項
- clasp環境での長期開発
- 本番データでのテスト
- 機密情報のコード埋め込み
- クリーンアップ忘れ

## チーム運用ルール

### 共有環境利用
- **作業開始前**: 他の人の作業が残っていないか確認
- **作業完了後**: 必ずクリーンアップ実行
- **長時間占有禁止**: 短時間で個人プロジェクトに移行
- **報告推奨**: Slackで作業開始・終了を報告

### コンフリクト回避
- 同時編集の回避
- 緊急時は個人環境で開発
- 重要な作業はバックアップ取得

## セキュリティ・安全性

### 必須注意事項
- 機密データのコード埋め込み禁止
- 本番環境での実験禁止
- テストデータのみ使用
- 定期的なクリーンアップ

### OAuth認証管理
- 共通クライアント使用
- 個人権限での認証
- 必要最小限のスコープ設定

## トラブルシューティング支援

### よくある問題への対処
- Python環境エラー → `uv sync`
- GAS権限エラー → Web Editor実行提案
- 関数未発見 → `clasp push` 確認
- clasp run権限エラー → スコープ確認・再認証
- 占有競合 → Slackで調整

### サポート体制
- 社内Slackチャンネル: #gas-development-support
- ドキュメント: セットアップガイド・開発フローガイド
- エスカレーション: IT部門

## 全社展開時の重要ポイント

### 管理者の責務
- 共通OAuth設定の維持
- テンプレート配布
- ユーザーサポート
- 利用状況モニタリング

### ユーザーの責務
- セットアップガイドの遵守
- クリーンアップの徹底
- チーム連携
- セキュリティルールの遵守

---

**記憶**: 新運用方針 - clasp環境は一時作業場、個人プロジェクト移行、必須クリーンアップ